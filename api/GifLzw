GifLzw_DictEntryFlags_IsReset	equ 7
GifLzw_DictEntryFlags_IsEnd	equ 6
GifLzw_DictEntryFlags	equ	0
GifLzw_DictEntryLeafString	equ	1
GifLzw_DictEntryStringLength	equ	2
GifLzw_DictEntryStringStartAddress	equ	4
GifLzw_DictEntrySize	equ	8
GifLzw_DictEntryLogSize	equ	3
GifLzw_DictHeaderCodeDepth	equ	0
GifLzw_DictHeaderNumberOfBasicCodes	equ	2
GifLzw_DictHeaderSize equ	4
GifLzw_DictSize	equ	GifLzw_DictEntrySize*4096+GifLzw_DictHeaderSize

;STATIC
;  IN
;    d0.b = LZW code depth (=color depth)
;  OUT
;    a0 = pointer to object instance
GifLzw_Create
	movem.l	d1-3/a1/a6,-(a7)
	clr.l	d3	;current code length (in bits)
	move.b	d0,d3
	move.l	#1,d2	;init dict entry size
	lsl.w	d3,d2
	add.w	#2,d2
	move.l	#GifLzw_DictSize,d0
	move.l	#MEMF_FAST,d1
	move.l	4.w,a6
	jsr	AllocMem(a6)
	move.l	d0,a1
	move.l	d0,a6
	move.w	d3,GifLzw_DictHeaderCodeDepth(a1)
	move.w	d2,GifLzw_DictHeaderNumberOfBasicCodes(a1)

	add.l	#GifLzw_DictHeaderSize,a1
	clr.l	d0
	move.w	d2,d1
GifLzw_Create_InitEntryLp
	clr.b	GifLzw_DictEntryFlags(a1)
	move.l	a1,a0
	add.l	#GifLzw_DictEntryLeafString,a0
	move.b	d0,(a0)
	move.w	#1,GifLzw_DictEntryStringLength(a1)
	move.l	a0,GifLzw_DictEntryStringStartAddress(a1)
	add.l	#GifLzw_DictEntrySize,a1
	add.w	#1,d0
	cmp.w	d1,d0
	bne	GifLzw_Create_InitEntryLp

	sub.l	#GifLzw_DictEntrySize,a1
	bset	#GifLzw_DictEntryFlags_IsEnd,GifLzw_DictEntryFlags(a1)
	sub.l	#GifLzw_DictEntrySize,a1
	bset	#GifLzw_DictEntryFlags_IsReset,GifLzw_DictEntryFlags(a1)
	move.l	a6,a0
	movem.l	(a7)+,d1-3/a1/a6
	rts

;INSTANCE
;  IN
;    a0 = pointer to object instance
GifLzw_Destroy
	movem.l	d0-1/a1/a6,-(a7)
	move.l	#GifLzw_DictSize,d0
	move.l	a0,a1
	move.l	4.w,a6
	jsr	FreeMem(a6)
	movem.l	(a7)+,d0-1/a1/a6
	rts

;INSTANCE
;  IN
;    d0.l = output buffer length (used to ensure that buffer overflow won't ever occur)
;    a0 = pointer to object instance
;    a1 = encoded data (right-to-left, meaning pointer to last byte +1)
;    a2 = output buffer start
GifLzw_Decode
	movem.l	d1-7/a3-6,-(a7)
	move.l	a0,a5
	add.l	#GifLzw_DictHeaderSize,a5	;dictionary entry pointer
	move.w	GifLzw_DictHeaderCodeDepth-GifLzw_DictHeaderSize(a5),d4
	add.w	#1,d4	;current code length (in bits) - starts with one more because of the 2 RESET/END codes
	move.w	GifLzw_DictHeaderNumberOfBasicCodes-GifLzw_DictHeaderSize(a5),d7	;current number of dict entries
	move.l	a2,a3	;current output pointer
	move.l	a3,a4
	add.l	d0,a4	;first byte outsize of output buffer
	move.l	a1,a2	;current encoded data pointer

	clr.w	d5	;current bit position of reading in block
	move.l	a3,a6	;start address of last code's string
	clr.w	d6	;length of of last code's string
GifLzw_Decode_MainLp
	clr.l	d0
	move.b	-3(a2),d0
	swap	d0
	move.b	-2(a2),d0
	lsl.w	#8,d0
	move.b	-1(a2),d0	;always prepare three bytes for current reading (code length up to 12 bits, covering mid-byte and parts of left/right is possible)
	lsr.l	d5,d0	;lowest bits show next bit in block to be decoded
	add.w	d4,d5
	move.l	#$FFFF,d1
	lsl.l	d4,d1
	swap	d1
	and.w	d1,d0	;next code to be decoded (clean)
	
	move.w	d0,d2	;entry offset in dictionary
	lsl.w	#GifLzw_DictEntryLogSize,d2
	cmp.w	d7,d0	;is d0 in [0,dictSize-1] ?
	bge	GifLzw_Decode_MainLp_GuessNewEntry
	move.b	GifLzw_DictEntryFlags(a5,d2.w),d1
	btst	#GifLzw_DictEntryFlags_IsReset,d1
	bne	GifLzw_Decode_MainLp_Reset
	btst	#GifLzw_DictEntryFlags_IsEnd,d1
	bne	GifLzw_Decode_MainLp_Exit
	bra	GifLzw_Decode_MainLp_HandleKnown
	
GifLzw_Decode_MainLp_Reset
	move.w	GifLzw_DictHeaderCodeDepth-GifLzw_DictHeaderSize(a5),d4
	add.w	#1,d4	;current code length (in bits) - starts with one more because of the 2 RESET/END codes
	move.w	GifLzw_DictHeaderNumberOfBasicCodes-GifLzw_DictHeaderSize(a5),d7	;current number of dict entries
	clr.w	d6	;set last code string length to 0
	bra	GifLzw_Decode_MainLp_PrepareLpEnd

GifLzw_Decode_MainLp_HandleKnown
	move.l	GifLzw_DictEntryStringStartAddress(a5,d2.w),a0
	clr.l	d1	;needed because of cmp.l for min copy length
	move.w	GifLzw_DictEntryStringLength(a5,d2.w),d1
	move.l	a4,d0
	sub.l	a3,d0
	cmp.l	d1,d0
	bge	GifLzw_Decode_MainLp_HandleKnown_CopyString
	move.w	d0,d1	;output buffer overflow ensurance: set loop to min(code length,remaining buffer)
GifLzw_Decode_MainLp_HandleKnown_CopyString
	move.b	(a0)+,(a3)+
	sub.w	#1,d1
	bne	GifLzw_Decode_MainLp_HandleKnown_CopyString
	cmp.w	#4096,d7	;only create new dict entry if there is still some place - encoder not enforced to send reset code...
	beq	GifLzw_Decode_MainLp_PrepareLpEnd
	move.w	d7,d1
	lsl.w	#GifLzw_DictEntryLogSize,d1
	move.l	a3,a6
	sub.w	GifLzw_DictEntryStringLength(a5,d2.w),a6
	move.l	a6,a1
	sub.w	d6,a1
	move.w	d6,d0
	add.w	#1,d0	;new entry only contains old string plus first value of code string (prefix already failed there)
	move.w	GifLzw_DictEntryStringLength(a5,d2.w),d6
	cmp.w	#1,d0	;test whether there was no prefix before (then no dictionary increase)
	beq	GifLzw_Decode_MainLp_PrepareLpEnd
	move.w	d0,GifLzw_DictEntryStringLength(a5,d1.w)
	move.l	a1,GifLzw_DictEntryStringStartAddress(a5,d1.w)
	bra	GifLzw_Decode_MainLp_IncreaseDictionary
	
GifLzw_Decode_MainLp_GuessNewEntry
	move.l	a6,a0
	clr.l	d1	;needed because of cmp.l for min copy length
	move.w	d6,d1
	move.l	a4,d0
	sub.l	a3,d0
	cmp.l	d1,d0
	bge	GifLzw_Decode_MainLp_GuessNewEntry_CopyString
	move.w	d0,d1	;output buffer overflow ensurance: set loop to min(code length,remaining buffer)
GifLzw_Decode_MainLp_GuessNewEntry_CopyString
	move.b	(a0)+,(a3)+
	sub.w	#1,d1
	bne	GifLzw_Decode_MainLp_GuessNewEntry_CopyString
	move.b	(a6),(a3)+	;guess is old string plus first value
	cmp.w	#4096,d7	;only create new dict entry if there is still some place - encoder not enforced to send reset code...
	beq	GifLzw_Decode_MainLp_PrepareLpEnd
	move.w	d7,d1
	lsl.w	#GifLzw_DictEntryLogSize,d1
	move.l	a6,GifLzw_DictEntryStringStartAddress(a5,d1.w)
	add.l	#1,d6
	move.w	d6,GifLzw_DictEntryStringLength(a5,d1.w)

GifLzw_Decode_MainLp_IncreaseDictionary
	clr.w	GifLzw_DictEntryFlags(a5,d1.w)
	add.w	#1,d7
	btst	d4,d7	;e.g., 3bit before but now size 8 (=2log3) => code extension
	beq	GifLzw_Decode_MainLp_PrepareLpEnd_NoCodeLengthExtension
	cmp.w	#12,d4	;only create increase code size if not yet at 12 (=maximum) - encoder not enforced to send reset code...
	beq	GifLzw_Decode_MainLp_PrepareLpEnd
	add.w	#1,d4
GifLzw_Decode_MainLp_PrepareLpEnd_NoCodeLengthExtension

GifLzw_Decode_MainLp_PrepareLpEnd
	cmp.w	#8,d5
	blt	GifLzw_Decode_MainLp_BitsLeftOnEncodedImagePosition
	sub.w	#8,d5
	sub.l	#1,a2
	bra	GifLzw_Decode_MainLp_PrepareLpEnd	;two bytes can be swallowed at once (e.g., one bit of -1(a2) plus 8 bits of -2(a2) means that both have to be skiped) => try again
GifLzw_Decode_MainLp_BitsLeftOnEncodedImagePosition

	cmp.l	a3,a4	;enforce that only continued if buffer not overflown (can only happen if the stop code is never read)
	bgt	GifLzw_Decode_MainLp
GifLzw_Decode_MainLp_Error_BufferOverflow
	nop

GifLzw_Decode_MainLp_Exit
	move.l	a3,a0
	movem.l	(a7)+,d1-7/a3-6
	rts
